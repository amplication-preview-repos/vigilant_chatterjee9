/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TextInput as PrismaTextInput } from "@prisma/client";

export class TextInputServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TextInputCountArgs, "select">
  ): Promise<number> {
    return this.prisma.textInput.count(args);
  }

  async textInputs(
    args: Prisma.TextInputFindManyArgs
  ): Promise<PrismaTextInput[]> {
    return this.prisma.textInput.findMany(args);
  }
  async textInput(
    args: Prisma.TextInputFindUniqueArgs
  ): Promise<PrismaTextInput | null> {
    return this.prisma.textInput.findUnique(args);
  }
  async createTextInput(
    args: Prisma.TextInputCreateArgs
  ): Promise<PrismaTextInput> {
    return this.prisma.textInput.create(args);
  }
  async updateTextInput(
    args: Prisma.TextInputUpdateArgs
  ): Promise<PrismaTextInput> {
    return this.prisma.textInput.update(args);
  }
  async deleteTextInput(
    args: Prisma.TextInputDeleteArgs
  ): Promise<PrismaTextInput> {
    return this.prisma.textInput.delete(args);
  }
}
