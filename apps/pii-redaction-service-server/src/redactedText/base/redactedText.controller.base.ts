/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RedactedTextService } from "../redactedText.service";
import { RedactedTextCreateInput } from "./RedactedTextCreateInput";
import { RedactedText } from "./RedactedText";
import { RedactedTextFindManyArgs } from "./RedactedTextFindManyArgs";
import { RedactedTextWhereUniqueInput } from "./RedactedTextWhereUniqueInput";
import { RedactedTextUpdateInput } from "./RedactedTextUpdateInput";
import { PiiFindManyArgs } from "../../pii/base/PiiFindManyArgs";
import { Pii } from "../../pii/base/Pii";
import { PiiWhereUniqueInput } from "../../pii/base/PiiWhereUniqueInput";

export class RedactedTextControllerBase {
  constructor(protected readonly service: RedactedTextService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RedactedText })
  async createRedactedText(
    @common.Body() data: RedactedTextCreateInput
  ): Promise<RedactedText> {
    return await this.service.createRedactedText({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        originalTextId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RedactedText] })
  @ApiNestedQuery(RedactedTextFindManyArgs)
  async redactedTexts(@common.Req() request: Request): Promise<RedactedText[]> {
    const args = plainToClass(RedactedTextFindManyArgs, request.query);
    return this.service.redactedTexts({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        originalTextId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RedactedText })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async redactedText(
    @common.Param() params: RedactedTextWhereUniqueInput
  ): Promise<RedactedText | null> {
    const result = await this.service.redactedText({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        originalTextId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RedactedText })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRedactedText(
    @common.Param() params: RedactedTextWhereUniqueInput,
    @common.Body() data: RedactedTextUpdateInput
  ): Promise<RedactedText | null> {
    try {
      return await this.service.updateRedactedText({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          originalTextId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RedactedText })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRedactedText(
    @common.Param() params: RedactedTextWhereUniqueInput
  ): Promise<RedactedText | null> {
    try {
      return await this.service.deleteRedactedText({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          originalTextId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/piis")
  @ApiNestedQuery(PiiFindManyArgs)
  async findPiis(
    @common.Req() request: Request,
    @common.Param() params: RedactedTextWhereUniqueInput
  ): Promise<Pii[]> {
    const query = plainToClass(PiiFindManyArgs, request.query);
    const results = await this.service.findPiis(params.id, {
      ...query,
      select: {
        confidence: true,
        createdAt: true,
        id: true,

        redactedText: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/piis")
  async connectPiis(
    @common.Param() params: RedactedTextWhereUniqueInput,
    @common.Body() body: PiiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      piis: {
        connect: body,
      },
    };
    await this.service.updateRedactedText({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/piis")
  async updatePiis(
    @common.Param() params: RedactedTextWhereUniqueInput,
    @common.Body() body: PiiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      piis: {
        set: body,
      },
    };
    await this.service.updateRedactedText({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/piis")
  async disconnectPiis(
    @common.Param() params: RedactedTextWhereUniqueInput,
    @common.Body() body: PiiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      piis: {
        disconnect: body,
      },
    };
    await this.service.updateRedactedText({
      where: params,
      data,
      select: { id: true },
    });
  }
}
