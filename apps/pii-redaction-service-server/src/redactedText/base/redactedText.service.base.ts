/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RedactedText as PrismaRedactedText,
  Pii as PrismaPii,
} from "@prisma/client";

export class RedactedTextServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RedactedTextCountArgs, "select">
  ): Promise<number> {
    return this.prisma.redactedText.count(args);
  }

  async redactedTexts(
    args: Prisma.RedactedTextFindManyArgs
  ): Promise<PrismaRedactedText[]> {
    return this.prisma.redactedText.findMany(args);
  }
  async redactedText(
    args: Prisma.RedactedTextFindUniqueArgs
  ): Promise<PrismaRedactedText | null> {
    return this.prisma.redactedText.findUnique(args);
  }
  async createRedactedText(
    args: Prisma.RedactedTextCreateArgs
  ): Promise<PrismaRedactedText> {
    return this.prisma.redactedText.create(args);
  }
  async updateRedactedText(
    args: Prisma.RedactedTextUpdateArgs
  ): Promise<PrismaRedactedText> {
    return this.prisma.redactedText.update(args);
  }
  async deleteRedactedText(
    args: Prisma.RedactedTextDeleteArgs
  ): Promise<PrismaRedactedText> {
    return this.prisma.redactedText.delete(args);
  }

  async findPiis(
    parentId: string,
    args: Prisma.PiiFindManyArgs
  ): Promise<PrismaPii[]> {
    return this.prisma.redactedText
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .piis(args);
  }
}
