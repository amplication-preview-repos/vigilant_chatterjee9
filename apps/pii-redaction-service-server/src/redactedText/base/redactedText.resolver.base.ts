/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RedactedText } from "./RedactedText";
import { RedactedTextCountArgs } from "./RedactedTextCountArgs";
import { RedactedTextFindManyArgs } from "./RedactedTextFindManyArgs";
import { RedactedTextFindUniqueArgs } from "./RedactedTextFindUniqueArgs";
import { CreateRedactedTextArgs } from "./CreateRedactedTextArgs";
import { UpdateRedactedTextArgs } from "./UpdateRedactedTextArgs";
import { DeleteRedactedTextArgs } from "./DeleteRedactedTextArgs";
import { PiiFindManyArgs } from "../../pii/base/PiiFindManyArgs";
import { Pii } from "../../pii/base/Pii";
import { RedactedTextService } from "../redactedText.service";
@graphql.Resolver(() => RedactedText)
export class RedactedTextResolverBase {
  constructor(protected readonly service: RedactedTextService) {}

  async _redactedTextsMeta(
    @graphql.Args() args: RedactedTextCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RedactedText])
  async redactedTexts(
    @graphql.Args() args: RedactedTextFindManyArgs
  ): Promise<RedactedText[]> {
    return this.service.redactedTexts(args);
  }

  @graphql.Query(() => RedactedText, { nullable: true })
  async redactedText(
    @graphql.Args() args: RedactedTextFindUniqueArgs
  ): Promise<RedactedText | null> {
    const result = await this.service.redactedText(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RedactedText)
  async createRedactedText(
    @graphql.Args() args: CreateRedactedTextArgs
  ): Promise<RedactedText> {
    return await this.service.createRedactedText({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RedactedText)
  async updateRedactedText(
    @graphql.Args() args: UpdateRedactedTextArgs
  ): Promise<RedactedText | null> {
    try {
      return await this.service.updateRedactedText({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RedactedText)
  async deleteRedactedText(
    @graphql.Args() args: DeleteRedactedTextArgs
  ): Promise<RedactedText | null> {
    try {
      return await this.service.deleteRedactedText(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Pii], { name: "piis" })
  async findPiis(
    @graphql.Parent() parent: RedactedText,
    @graphql.Args() args: PiiFindManyArgs
  ): Promise<Pii[]> {
    const results = await this.service.findPiis(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
