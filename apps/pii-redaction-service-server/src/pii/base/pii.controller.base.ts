/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PiiService } from "../pii.service";
import { PiiCreateInput } from "./PiiCreateInput";
import { Pii } from "./Pii";
import { PiiFindManyArgs } from "./PiiFindManyArgs";
import { PiiWhereUniqueInput } from "./PiiWhereUniqueInput";
import { PiiUpdateInput } from "./PiiUpdateInput";

export class PiiControllerBase {
  constructor(protected readonly service: PiiService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pii })
  async createPii(@common.Body() data: PiiCreateInput): Promise<Pii> {
    return await this.service.createPii({
      data: {
        ...data,

        redactedText: data.redactedText
          ? {
              connect: data.redactedText,
            }
          : undefined,
      },
      select: {
        confidence: true,
        createdAt: true,
        id: true,

        redactedText: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pii] })
  @ApiNestedQuery(PiiFindManyArgs)
  async piis(@common.Req() request: Request): Promise<Pii[]> {
    const args = plainToClass(PiiFindManyArgs, request.query);
    return this.service.piis({
      ...args,
      select: {
        confidence: true,
        createdAt: true,
        id: true,

        redactedText: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pii })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pii(@common.Param() params: PiiWhereUniqueInput): Promise<Pii | null> {
    const result = await this.service.pii({
      where: params,
      select: {
        confidence: true,
        createdAt: true,
        id: true,

        redactedText: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pii })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePii(
    @common.Param() params: PiiWhereUniqueInput,
    @common.Body() data: PiiUpdateInput
  ): Promise<Pii | null> {
    try {
      return await this.service.updatePii({
        where: params,
        data: {
          ...data,

          redactedText: data.redactedText
            ? {
                connect: data.redactedText,
              }
            : undefined,
        },
        select: {
          confidence: true,
          createdAt: true,
          id: true,

          redactedText: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pii })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePii(
    @common.Param() params: PiiWhereUniqueInput
  ): Promise<Pii | null> {
    try {
      return await this.service.deletePii({
        where: params,
        select: {
          confidence: true,
          createdAt: true,
          id: true,

          redactedText: {
            select: {
              id: true,
            },
          },

          typeField: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
