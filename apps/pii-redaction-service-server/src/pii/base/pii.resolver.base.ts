/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pii } from "./Pii";
import { PiiCountArgs } from "./PiiCountArgs";
import { PiiFindManyArgs } from "./PiiFindManyArgs";
import { PiiFindUniqueArgs } from "./PiiFindUniqueArgs";
import { CreatePiiArgs } from "./CreatePiiArgs";
import { UpdatePiiArgs } from "./UpdatePiiArgs";
import { DeletePiiArgs } from "./DeletePiiArgs";
import { RedactedText } from "../../redactedText/base/RedactedText";
import { PiiService } from "../pii.service";
@graphql.Resolver(() => Pii)
export class PiiResolverBase {
  constructor(protected readonly service: PiiService) {}

  async _piisMeta(
    @graphql.Args() args: PiiCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pii])
  async piis(@graphql.Args() args: PiiFindManyArgs): Promise<Pii[]> {
    return this.service.piis(args);
  }

  @graphql.Query(() => Pii, { nullable: true })
  async pii(@graphql.Args() args: PiiFindUniqueArgs): Promise<Pii | null> {
    const result = await this.service.pii(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pii)
  async createPii(@graphql.Args() args: CreatePiiArgs): Promise<Pii> {
    return await this.service.createPii({
      ...args,
      data: {
        ...args.data,

        redactedText: args.data.redactedText
          ? {
              connect: args.data.redactedText,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Pii)
  async updatePii(@graphql.Args() args: UpdatePiiArgs): Promise<Pii | null> {
    try {
      return await this.service.updatePii({
        ...args,
        data: {
          ...args.data,

          redactedText: args.data.redactedText
            ? {
                connect: args.data.redactedText,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pii)
  async deletePii(@graphql.Args() args: DeletePiiArgs): Promise<Pii | null> {
    try {
      return await this.service.deletePii(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => RedactedText, {
    nullable: true,
    name: "redactedText",
  })
  async getRedactedText(
    @graphql.Parent() parent: Pii
  ): Promise<RedactedText | null> {
    const result = await this.service.getRedactedText(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
